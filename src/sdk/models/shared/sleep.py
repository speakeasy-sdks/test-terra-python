"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import breathsample as shared_breathsample
from ..shared import heartratedatasample as shared_heartratedatasample
from ..shared import heartratevariabilitydatasamplermssd as shared_heartratevariabilitydatasamplermssd
from ..shared import heartratevariabilitydatasamplesdnn as shared_heartratevariabilitydatasamplesdnn
from ..shared import otherdevicedata as shared_otherdevicedata
from ..shared import oxygensaturationsample as shared_oxygensaturationsample
from ..shared import sleephypnogramsample as shared_sleephypnogramsample
from ..shared import snoringsample as shared_snoringsample
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepDeviceData:
    r"""Object containing information on the device which recorded data for the payload"""
    
    activation_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activation_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Activation timestamp of the device, if applicable"""  
    hardware_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardware_version'), 'exclude': lambda f: f is None }})
    r"""Hardware version of the device"""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Device manufacturer name"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device name - note that this can also be the name of the application/package which the data comes from, if coming from a data aggregator such as Google Fit"""  
    other_devices: Optional[list[shared_otherdevicedata.OtherDeviceData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_devices'), 'exclude': lambda f: f is None }})
    r"""Data pertaining to other devices which may have contributed data for this workout"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""Device Serial Number"""  
    software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software_version'), 'exclude': lambda f: f is None }})
    r"""Device Software Version"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepHeartRateDataDetailed:
    r"""Object containing detailed heart rate information for the associated sleep session"""
    
    hr_samples: Optional[list[shared_heartratedatasample.HeartRateDataSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_samples'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate data samples recorded for the user during the sleep session"""  
    hrv_samples_rmssd: Optional[list[shared_heartratevariabilitydatasamplermssd.HeartRateVariabilityDataSampleRMSSD]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_rmssd'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the sleep session, computed using RMSSD"""  
    hrv_samples_sdnn: Optional[list[shared_heartratevariabilitydatasamplesdnn.HeartRateVariabilityDataSampleSDNN]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_sdnn'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the sleep session, computed using SDNN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepHeartRateDataSummary:
    r"""Object containing summary information for the associated sleep session"""
    
    avg_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate of the user during the sleep session"""  
    avg_hrv_rmssd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_rmssd'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the sleep session, computed using RMSSD"""  
    avg_hrv_sdnn: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_sdnn'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the sleep session, computed using SDNN"""  
    max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Maximum HeartRate of the user during the sleep session"""  
    min_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Minimum HeartRate of the user during the sleep session"""  
    resting_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resting_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Resting HeartRate of the user, as determined by the fitness data provider"""  
    user_max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""User's maximum HeartRate based on their age, and other factors as determined by the fitness data provider"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepHeartRateData:
    r"""Object containing information on the user's heart rate during the sleep session"""
    
    detailed: Optional[SleepHeartRateDataDetailed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailed'), 'exclude': lambda f: f is None }})
    r"""Object containing detailed heart rate information for the associated sleep session"""  
    summary: Optional[SleepHeartRateDataSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Object containing summary information for the associated sleep session"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepMetadata:
    r"""Object containing daily summary metadata"""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the associated sleep session, in ISO8601 format with microsecond precisionTimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    is_nap: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_nap'), 'exclude': lambda f: f is None }})
    r"""Flag indicating whether the sleep session was a nap, or the user's main sleep session for the day"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the associated sleep session, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    upload_type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_type'), 'exclude': lambda f: f is None }})
    r"""The upload type for the associated sleep session, providing information on whether this was an automatic sleep or user-entered"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepReadinessData:
    r"""Object containing information on the user's readiness for the day, based off the quality and duration of their sleep"""
    
    readiness: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readiness'), 'exclude': lambda f: f is None }})
    r"""User's readiness score for a given day, resulting from the sleep session"""  
    recovery_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recovery_level'), 'exclude': lambda f: f is None }})
    r"""User's recovery score for a given day, resulting from the sleep session - takes Enum value"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepRespirationDataBreathsData:
    r"""Object containing information on breathing rate for the sleep session"""
    
    avg_breaths_per_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_breaths_per_min'), 'exclude': lambda f: f is None }})
    r"""Average breathing rate of the user during the sleep session"""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the recording of breathing rate data, in ISO8601 format with microsecond precisionTimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    max_breaths_per_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_breaths_per_min'), 'exclude': lambda f: f is None }})
    r"""Maximum breathing rate of the user during the sleep session"""  
    min_breaths_per_min: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_breaths_per_min'), 'exclude': lambda f: f is None }})
    r"""Minimum breathing rate of the user during the sleep session"""  
    on_demand_reading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('on_demand_reading'), 'exclude': lambda f: f is None }})
    r"""Flag indicating if the reading was performed on demand, or if it was automatically captured by the device"""  
    samples: Optional[list[shared_breathsample.BreathSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samples'), 'exclude': lambda f: f is None }})
    r"""List of breathing rate information sampled throughout the sleep session"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the recording of breathing rate data, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepRespirationDataOxygenSaturationData:
    r"""Object containing information on saturation metrics for the sleep session"""
    
    avg_saturation_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_saturation_percentage'), 'exclude': lambda f: f is None }})
    r"""Average Oxygen Saturation percentage of the user during the sleep session"""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the recording of oxygen saturation, in ISO8601 format with microsecond precisionTimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    samples: Optional[list[shared_oxygensaturationsample.OxygenSaturationSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samples'), 'exclude': lambda f: f is None }})
    r"""Array of Oxygen Saturation percentage datapoints sampled throughout the sleep session"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the recording of oxygen saturation, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepRespirationDataSnoringData:
    r"""Object containing information on snoring metrics for the sleep session"""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the recording of snoring data, in ISO8601 format with microsecond precisionTimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    num_snoring_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_snoring_events'), 'exclude': lambda f: f is None }})
    r"""Number of times over the sleep period when the user started snoring, as determined by the device"""  
    samples: Optional[list[shared_snoringsample.SnoringSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samples'), 'exclude': lambda f: f is None }})
    r"""List of snoring information data points sampled throughout the sleep session"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the recording of snoring data, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    total_snoring_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_snoring_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was snoring"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepRespirationData:
    r"""Object containing information on the user's respiration throughout the sleep session"""
    
    breaths_data: Optional[SleepRespirationDataBreathsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('breaths_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on breathing rate for the sleep session"""  
    oxygen_saturation_data: Optional[SleepRespirationDataOxygenSaturationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oxygen_saturation_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on saturation metrics for the sleep session"""  
    snoring_data: Optional[SleepRespirationDataSnoringData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snoring_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on snoring metrics for the sleep session"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepSleepDurationsDataAsleep:
    r"""Object containing information on the duration the user spent asleep during the sleep recording session"""
    
    duration_asleep_state_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_asleep_state_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was asleep, in any state"""  
    duration_deep_sleep_state_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_deep_sleep_state_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was in a state of deep sleep"""  
    duration_light_sleep_state_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_light_sleep_state_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was in a state of light sleep"""  
    duration_rem_sleep_state_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_REM_sleep_state_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was in a state of REM sleep"""  
    num_rem_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_REM_events'), 'exclude': lambda f: f is None }})
    r"""Number of periods of REM sleep captured during the sleep session"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepSleepDurationsDataAwake:
    r"""Object containing information on the duration the user spent awake during the sleep recording session"""
    
    duration_awake_state_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_awake_state_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was awake during the sleep session"""  
    duration_long_interruption_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_long_interruption_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was awake during the sleep session, when the interruption of their sleep was greater than 90 seconds."""  
    duration_short_interruption_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_short_interruption_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration for which the user was awake during the sleep session, when the interruption of their sleep was less than 90 seconds"""  
    num_out_of_bed_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_out_of_bed_events'), 'exclude': lambda f: f is None }})
    r"""Number of times the user got out of bed during the sleep session"""  
    num_wakeup_events: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_wakeup_events'), 'exclude': lambda f: f is None }})
    r"""Number of times the user woke up during the sleep session"""  
    sleep_latency_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sleep_latency_seconds'), 'exclude': lambda f: f is None }})
    r"""Sleep latency, defined as time between the moment the user lays in bed with the intention to sleep and the moment they actually fall asleep"""  
    wake_up_latency_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wake_up_latency_seconds'), 'exclude': lambda f: f is None }})
    r"""Wake up latency, defined as time between the moment the user wakes up and the moment they get out of bed"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepSleepDurationsDataOther:
    r"""Object containing information on the miscellaneous duration data for the sleep recording session"""
    
    duration_in_bed_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_in_bed_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration of time spent in bed"""  
    duration_unmeasurable_sleep_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_unmeasurable_sleep_seconds'), 'exclude': lambda f: f is None }})
    r"""Total duration during which the user's state (awake, asleep, REM, etc) was unmeasurable during the sleep session"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepSleepDurationsData:
    r"""Object containing information on the user's duration spent in various sleep stages"""
    
    asleep: Optional[SleepSleepDurationsDataAsleep] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asleep'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the duration the user spent asleep during the sleep recording session"""  
    awake: Optional[SleepSleepDurationsDataAwake] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awake'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the duration the user spent awake during the sleep recording session"""  
    hypnogram_samples: Optional[list[shared_sleephypnogramsample.SleepHypnogramSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hypnogram_samples'), 'exclude': lambda f: f is None }})
    r"""List of sleep stage (Hypnogram) samples recorded during the user's sleep session"""  
    other: Optional[SleepSleepDurationsDataOther] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the miscellaneous duration data for the sleep recording session"""  
    sleep_efficiency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sleep_efficiency'), 'exclude': lambda f: f is None }})
    r"""Sleep efficiency of the user given as a percentage, measured as time spent asleep divided by time spent in bed"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepTemperatureData:
    r"""Object containing body temperature information of the user during the sleep recording session"""
    
    delta: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delta'), 'exclude': lambda f: f is None }})
    r"""Variation in user's skin temperature from their baseline"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Sleep:
    
    device_data: Optional[SleepDeviceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the device which recorded data for the payload"""  
    heart_rate_data: Optional[SleepHeartRateData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heart_rate_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's heart rate during the sleep session"""  
    metadata: Optional[SleepMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Object containing daily summary metadata"""  
    readiness_data: Optional[SleepReadinessData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readiness_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's readiness for the day, based off the quality and duration of their sleep"""  
    respiration_data: Optional[SleepRespirationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('respiration_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's respiration throughout the sleep session"""  
    sleep_durations_data: Optional[SleepSleepDurationsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sleep_durations_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's duration spent in various sleep stages"""  
    temperature_data: Optional[SleepTemperatureData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature_data'), 'exclude': lambda f: f is None }})
    r"""Object containing body temperature information of the user during the sleep recording session"""  
    