"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class KetoneDataSampleSampleTypeEnum(str, Enum):
    r"""Flag indicating the ketone sample type (e.g. blood, breath, urine)"""
    UNKNOWN = 'UNKNOWN'
    BLOOD = 'BLOOD'
    BREATH = 'BREATH'
    URINE = 'URINE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KetoneDataSample:
    
    ketone_mg_per_d_l: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ketone_mg_per_dL'), 'exclude': lambda f: f is None }})
    r"""Ketone in mg per dL"""  
    sample_type: Optional[KetoneDataSampleSampleTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sample_type'), 'exclude': lambda f: f is None }})
    r"""Flag indicating the ketone sample type (e.g. blood, breath, urine)"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time with which the record is associated, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    