"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class SleepHypnogramSampleLevelEnum(str, Enum):
    r"""Sleep stage the user is in at a moment in time (e.g. deep sleep, light sleep etc)"""
    UNKNOWN = 'UNKNOWN'
    AWAKE = 'AWAKE'
    SLEEPING = 'SLEEPING'
    OUT_OF_BED = 'OUT_OF_BED'
    LIGHT = 'LIGHT'
    DEEP = 'DEEP'
    REM = 'REM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SleepHypnogramSample:
    
    level: Optional[SleepHypnogramSampleLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""Sleep stage the user is in at a moment in time (e.g. deep sleep, light sleep etc)"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time with which the record is associated, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    