"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import activitylevelsample as shared_activitylevelsample
from ..shared import cadencesample as shared_cadencesample
from ..shared import caloriesample as shared_caloriesample
from ..shared import distancesample as shared_distancesample
from ..shared import elevationsample as shared_elevationsample
from ..shared import floorsclimbedsample as shared_floorsclimbedsample
from ..shared import heartratedatasample as shared_heartratedatasample
from ..shared import heartratevariabilitydatasamplermssd as shared_heartratevariabilitydatasamplermssd
from ..shared import heartratevariabilitydatasamplesdnn as shared_heartratevariabilitydatasamplesdnn
from ..shared import heartratezone as shared_heartratezone
from ..shared import lapsample as shared_lapsample
from ..shared import metsample as shared_metsample
from ..shared import otherdevicedata as shared_otherdevicedata
from ..shared import oxygensaturationsample as shared_oxygensaturationsample
from ..shared import positionsample as shared_positionsample
from ..shared import powersample as shared_powersample
from ..shared import speedsample as shared_speedsample
from ..shared import stepsample as shared_stepsample
from ..shared import torquesample as shared_torquesample
from ..shared import tsssample as shared_tsssample
from ..shared import vo2maxsample as shared_vo2maxsample
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityMETData:
    r"""Object containing information on the Metabolic Equivalent of Task for the workout"""
    
    avg_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_level'), 'exclude': lambda f: f is None }})
    r"""The average MET level of the activity"""  
    met_samples: Optional[list[shared_metsample.METSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MET_samples'), 'exclude': lambda f: f is None }})
    r"""An array of Metabolic Equivalent Time samples, as calculated by the user's wearable"""  
    num_high_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_high_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in High Intensity during the workout - based off MET scale"""  
    num_inactive_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_inactive_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in state of Inactivity during the workout - based off MET scale"""  
    num_low_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_low_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in Low Intensity during the workout - based off MET scale"""  
    num_moderate_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_moderate_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in Moderate Intensity during the workout - based off MET scale"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityTSSData:
    r"""Object containing information on the stress put on the user's body from a workout"""
    
    tss_samples: Optional[list[shared_tsssample.TSSSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TSS_samples'), 'exclude': lambda f: f is None }})
    r"""Array of TSS information sampled throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityActiveDurationsData:
    r"""Number of minutes spent at various intensities during the workout, as reported by the Fitness Data provider"""
    
    activity_levels_samples: Optional[list[shared_activitylevelsample.ActivityLevelSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_levels_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of the intensity the user was in at various points during the workout"""  
    activity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in an active state during the workout"""  
    inactivity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactivity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in an inactive state during the workout"""  
    low_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('low_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a low intensity state during the workout"""  
    moderate_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderate_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a moderate intensity state during the workout"""  
    num_continuous_inactive_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_continuous_inactive_periods'), 'exclude': lambda f: f is None }})
    r"""Maximum number of continuous periods spent in an inactive state during the workout"""  
    rest_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rest_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent resting during the workout"""  
    vigorous_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vigorous_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a state of vigorous intensity during the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityCaloriesData:
    r"""Object containing calorie-related information for the user during the specific workout"""
    
    bmr_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BMR_calories'), 'exclude': lambda f: f is None }})
    r"""BMR of the user on the specific day, which contributes to the total calories burned during the workout"""  
    calorie_samples: Optional[list[shared_caloriesample.CalorieSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calorie_samples'), 'exclude': lambda f: f is None }})
    r"""Detailed samples of cumulative calories burned at various timestamps over the period of the workout"""  
    net_activity_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_activity_calories'), 'exclude': lambda f: f is None }})
    r"""Net calorie burn coming just from the workout itself, excluding BMR"""  
    net_intake_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_intake_calories'), 'exclude': lambda f: f is None }})
    r"""Net intake of calories during the period of the workout"""  
    total_burned_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_burned_calories'), 'exclude': lambda f: f is None }})
    r"""Total number of calories burned during the workout, including BMR"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDeviceData:
    r"""Object containing information on the device which recorded the specific workout"""
    
    activation_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activation_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Activation timestamp of the device, if applicable"""  
    hardware_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardware_version'), 'exclude': lambda f: f is None }})
    r"""Hardware version of the device"""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Device manufacturer name"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device name - note that this can also be the name of the application/package which the data comes from, if coming from a data aggregator such as Google Fit"""  
    other_devices: Optional[list[shared_otherdevicedata.OtherDeviceData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_devices'), 'exclude': lambda f: f is None }})
    r"""Data pertaining to other devices which may have contributed data for this workout"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""Device Serial Number"""  
    software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software_version'), 'exclude': lambda f: f is None }})
    r"""Device Software Version"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDistanceDataDetailed:
    r"""Object containing detailed distance information - this may included second-by-second samples"""
    
    distance_samples: Optional[list[shared_distancesample.DistanceSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of distance covered throughout the workout"""  
    elevation_samples: Optional[list[shared_elevationsample.ElevationSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of elevation throughout the workout"""  
    floors_climbed_samples: Optional[list[shared_floorsclimbedsample.FloorsClimbedSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floors_climbed_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of floors climbed throughout the workout, as determined by the fitness data provider"""  
    step_samples: Optional[list[shared_stepsample.StepSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of steps performed throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDistanceDataSummaryElevation:
    r"""Average elevation of the user throughout the workout"""
    
    avg_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_meters'), 'exclude': lambda f: f is None }})
    r"""Average elevation of the user throughout the workout"""  
    gain_actual_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gain_actual_meters'), 'exclude': lambda f: f is None }})
    r"""Planned elevation gain for the workout"""  
    gain_planned_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gain_planned_meters'), 'exclude': lambda f: f is None }})
    r"""Elevation gain of the user throughout the workout - this includes all elevation gain, and does _not_ represent net gain"""  
    loss_actual_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loss_actual_meters'), 'exclude': lambda f: f is None }})
    r"""Elevation loss of the user throughout the workout"""  
    max_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_meters'), 'exclude': lambda f: f is None }})
    r"""Maximum elevation of the user during the workout"""  
    min_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_meters'), 'exclude': lambda f: f is None }})
    r"""Minimum elevation of the user during the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDistanceDataSummarySwimming:
    r"""Summary information of the user's swimming statistics for the workout, if applicable"""
    
    num_laps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_laps'), 'exclude': lambda f: f is None }})
    r"""Total number of swimming laps performed during the workout"""  
    num_strokes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_strokes'), 'exclude': lambda f: f is None }})
    r"""Total number of swimming strokes performed during the workout"""  
    pool_length_meters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pool_length_meters'), 'exclude': lambda f: f is None }})
    r"""Pool length for associated with the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDistanceDataSummary:
    r"""Object containing summary information related to distance covered throughout the workout"""
    
    distance_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_meters'), 'exclude': lambda f: f is None }})
    r"""Total distance covered by the user throughout the workout"""  
    elevation: Optional[ActivityDistanceDataSummaryElevation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation'), 'exclude': lambda f: f is None }})
    r"""Average elevation of the user throughout the workout"""  
    floors_climbed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floors_climbed'), 'exclude': lambda f: f is None }})
    r"""Total number of elevation gain in floors climbed equivalent throughout the workout, as determined by the fitness data provider"""  
    steps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})
    r"""Total number of steps performed during the workout"""  
    swimming: Optional[ActivityDistanceDataSummarySwimming] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('swimming'), 'exclude': lambda f: f is None }})
    r"""Summary information of the user's swimming statistics for the workout, if applicable"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityDistanceData:
    r"""Object containing information related to distance covered during the associated workout"""
    
    detailed: Optional[ActivityDistanceDataDetailed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailed'), 'exclude': lambda f: f is None }})
    r"""Object containing detailed distance information - this may included second-by-second samples"""  
    summary: Optional[ActivityDistanceDataSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Object containing summary information related to distance covered throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityEnergyData:
    r"""Object containing information on the energy expended by the user during the workout"""
    
    energy_kilojoules: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energy_kilojoules'), 'exclude': lambda f: f is None }})
    r"""Total number of kiloJoules expended during the workout"""  
    energy_planned_kilojoules: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energy_planned_kilojoules'), 'exclude': lambda f: f is None }})
    r"""Total number of kiloJoules planned to be expended during the workout - represents the user's predefined goal for the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityHeartRateDataDetailed:
    r"""Object containing detailed heart rate information for the associated workout"""
    
    hr_samples: Optional[list[shared_heartratedatasample.HeartRateDataSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_samples'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate data samples recorded for the user during the workout"""  
    hrv_samples_rmssd: Optional[list[shared_heartratevariabilitydatasamplermssd.HeartRateVariabilityDataSampleRMSSD]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_rmssd'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the workout, computed using RMSSD"""  
    hrv_samples_sdnn: Optional[list[shared_heartratevariabilitydatasamplesdnn.HeartRateVariabilityDataSampleSDNN]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_sdnn'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the workout, computed using SDNN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityHeartRateDataSummary:
    r"""Object containing summary heart rate information for the associated workout"""
    
    avg_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate of the user during the workout"""  
    avg_hrv_rmssd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_rmssd'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the workout, computed using RMSSD"""  
    avg_hrv_sdnn: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_sdnn'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the workout, computed using SDNN"""  
    hr_zone_data: Optional[list[shared_heartratezone.HeartRateZone]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_zone_data'), 'exclude': lambda f: f is None }})
    r"""Array of time spent in various HR zones throughout the workout"""  
    max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Maximum HeartRate of the user during the workout"""  
    min_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Minimum HeartRate of the user during the workout"""  
    resting_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resting_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Resting HeartRate of the user, as determined by the fitness data provider"""  
    user_max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""User's maximum HeartRate based on their age, and other factors as determined by the fitness data provider"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityHeartRateData:
    r"""Object containing heartrate-related information for the workout"""
    
    detailed: Optional[ActivityHeartRateDataDetailed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailed'), 'exclude': lambda f: f is None }})
    r"""Object containing detailed heart rate information for the associated workout"""  
    summary: Optional[ActivityHeartRateDataSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Object containing summary heart rate information for the associated workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityLapData:
    r"""Object containing information on data for each lap performed by the user - mostly relates to track & field running activities, and swimming activities"""
    
    laps: Optional[list[shared_lapsample.LapSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('laps'), 'exclude': lambda f: f is None }})
    r"""Array of datapoints for each lap performed by the user during the workout"""  
    
class ActivityMetadataTypeEnum(str, Enum):
    r"""The type of activity performed for the associated workout"""
    IN_VEHICLE = 'IN_VEHICLE'
    BIKING = 'BIKING'
    STILL = 'STILL'
    UNKNOWN = 'UNKNOWN'
    TILTING = 'TILTING'
    WALKING = 'WALKING'
    RUNNING = 'RUNNING'
    AEROBICS = 'AEROBICS'
    BADMINTON = 'BADMINTON'
    BASEBALL = 'BASEBALL'
    BASKETBALL = 'BASKETBALL'
    BIATHLON = 'BIATHLON'
    HANDBIKING = 'HANDBIKING'
    MOUNTAIN_BIKING = 'MOUNTAIN_BIKING'
    ROAD_BIKING = 'ROAD_BIKING'
    SPINNING = 'SPINNING'
    STATIONARY_BIKING = 'STATIONARY_BIKING'
    UTILITY_BIKING = 'UTILITY_BIKING'
    BOXING = 'BOXING'
    CALISTHENICS = 'CALISTHENICS'
    CIRCUIT_TRAINING = 'CIRCUIT_TRAINING'
    CRICKET = 'CRICKET'
    DANCING = 'DANCING'
    ELLIPTICAL = 'ELLIPTICAL'
    FENCING = 'FENCING'
    AMERICAN_FOOTBALL = 'AMERICAN_FOOTBALL'
    AUSTRALIAN_FOOTBALL = 'AUSTRALIAN_FOOTBALL'
    ENGLISH_FOOTBALL = 'ENGLISH_FOOTBALL'
    FRISBEE = 'FRISBEE'
    GARDENING = 'GARDENING'
    GOLF = 'GOLF'
    GYMNASTICS = 'GYMNASTICS'
    HANDBALL = 'HANDBALL'
    HIKING = 'HIKING'
    HOCKEY = 'HOCKEY'
    HORSEBACK_RIDING = 'HORSEBACK_RIDING'
    HOUSEWORK = 'HOUSEWORK'
    JUMPING_ROPE = 'JUMPING_ROPE'
    KAYAKING = 'KAYAKING'
    KETTLEBELL_TRAINING = 'KETTLEBELL_TRAINING'
    KICKBOXING = 'KICKBOXING'
    KITESURFING = 'KITESURFING'
    MARTIAL_ARTS = 'MARTIAL_ARTS'
    MEDITATION = 'MEDITATION'
    MIXED_MARTIAL_ARTS = 'MIXED_MARTIAL_ARTS'
    P90_X_EXERCISES = 'P90X_EXERCISES'
    PARAGLIDING = 'PARAGLIDING'
    PILATES = 'PILATES'
    POLO = 'POLO'
    RACQUETBALL = 'RACQUETBALL'
    ROCK_CLIMBING = 'ROCK_CLIMBING'
    ROWING = 'ROWING'
    ROWING_MACHINE = 'ROWING_MACHINE'
    RUGBY = 'RUGBY'
    JOGGING = 'JOGGING'
    RUNNING_ON_SAND = 'RUNNING_ON_SAND'
    TREADMILL_RUNNING = 'TREADMILL_RUNNING'
    SAILING = 'SAILING'
    SCUBA_DIVING = 'SCUBA_DIVING'
    SKATEBOARDING = 'SKATEBOARDING'
    SKATING = 'SKATING'
    CROSS_SKATING = 'CROSS_SKATING'
    INDOOR_ROLLERBLADING = 'INDOOR_ROLLERBLADING'
    SKIING = 'SKIING'
    BACK_COUNTRY_SKIING = 'BACK_COUNTRY_SKIING'
    CROSS_COUNTRY_SKIING = 'CROSS_COUNTRY_SKIING'
    DOWNHILL_SKIING = 'DOWNHILL_SKIING'
    KITE_SKIING = 'KITE_SKIING'
    ROLLER_SKIING = 'ROLLER_SKIING'
    SLEDDING = 'SLEDDING'
    SNOWBOARDING = 'SNOWBOARDING'
    SNOWMOBILE = 'SNOWMOBILE'
    SNOWSHOEING = 'SNOWSHOEING'
    SQUASH = 'SQUASH'
    STAIR_CLIMBING = 'STAIR_CLIMBING'
    STAIR_CLIMBING_MACHINE = 'STAIR_CLIMBING_MACHINE'
    STAND_UP_PADDLEBOARDING = 'STAND_UP_PADDLEBOARDING'
    STRENGTH_TRAINING = 'STRENGTH_TRAINING'
    SURFING = 'SURFING'
    SWIMMING = 'SWIMMING'
    SWIMMING_SWIMMING_POOL = 'SWIMMING_SWIMMING_POOL'
    SWIMMING_OPEN_WATER = 'SWIMMING_OPEN_WATER'
    TABLE_TENNIS = 'TABLE_TENNIS'
    TEAM_SPORTS = 'TEAM_SPORTS'
    TENNIS = 'TENNIS'
    TREADMILL = 'TREADMILL'
    VOLLEYBALL = 'VOLLEYBALL'
    VOLLEYBALL_BEACH = 'VOLLEYBALL_BEACH'
    VOLLEYBALL_INDOOR = 'VOLLEYBALL_INDOOR'
    WAKEBOARDING = 'WAKEBOARDING'
    WALKING_FITNESS = 'WALKING_FITNESS'
    NORDIC_WALKING = 'NORDIC_WALKING'
    WALKING_TREADMILL = 'WALKING_TREADMILL'
    WATERPOLO = 'WATERPOLO'
    WEIGHTLIFTING = 'WEIGHTLIFTING'
    WHEELCHAIR = 'WHEELCHAIR'
    WINDSURFING = 'WINDSURFING'
    YOGA = 'YOGA'
    ZUMBA = 'ZUMBA'
    DIVING = 'DIVING'
    ERGOMETER = 'ERGOMETER'
    ICE_SKATING = 'ICE_SKATING'
    INDOOR_SKATING = 'INDOOR_SKATING'
    CURLING = 'CURLING'
    OTHER = 'OTHER'
    CROSSFIT = 'CROSSFIT'
    HIIT = 'HIIT'
    INTERVAL_TRAINING = 'INTERVAL_TRAINING'
    WALKING_STROLLER = 'WALKING_STROLLER'
    ELEVATOR = 'ELEVATOR'
    ESCALATOR = 'ESCALATOR'
    ARCHERY = 'ARCHERY'
    SOFTBALL = 'SOFTBALL'
    GUIDED_BREATHING = 'GUIDED_BREATHING'
    CARDIO_TRAINING = 'CARDIO_TRAINING'
    LACROSSE = 'LACROSSE'
    STRETCHING = 'STRETCHING'
    TRIATHLON = 'TRIATHLON'
    INLINE_SKATING = 'INLINE_SKATING'
    SKY_DIVING = 'SKY_DIVING'
    PADDLING = 'PADDLING'
    MOUNTAINEERING = 'MOUNTAINEERING'
    FISHING = 'FISHING'
    WATER_SKIING = 'WATER_SKIING'
    INDOOR_RUNNING = 'INDOOR_RUNNING'

class ActivityMetadataUploadTypeEnum(str, Enum):
    r"""The upload type for the associated workout, providing information on whether this was an automatic workout or user-entered"""
    UNKNOWN = 'UNKNOWN'
    AUTOMATIC = 'AUTOMATIC'
    MANUAL = 'MANUAL'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    PENDING = 'PENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityMetadata:
    r"""Object containing workout metadata"""
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city'), 'exclude': lambda f: f is None }})
    r"""The City in which the workout was performed"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})
    r"""The Country in which the workout was performed"""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name - either user-entered or given by the fitness data provider - of the associated workout"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The State in which the workout was performed"""  
    summary_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for the workout - note that this is unique for the given user, and may not be globally unique"""  
    type: Optional[ActivityMetadataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of activity performed for the associated workout"""  
    upload_type: Optional[ActivityMetadataUploadTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_type'), 'exclude': lambda f: f is None }})
    r"""The upload type for the associated workout, providing information on whether this was an automatic workout or user-entered"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityMovementData:
    r"""Object containing information on the user's movement throughout the workout"""
    
    adjusted_max_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adjusted_max_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Adjusted max speed of the user during the workout - generated using Terra's algorithms to remove potential affecting the user's actual max speed measurement"""  
    avg_cadence_rpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_cadence_rpm'), 'exclude': lambda f: f is None }})
    r"""Maximum speed of the user during the workout"""  
    avg_pace_minutes_per_kilometer: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_pace_minutes_per_kilometer'), 'exclude': lambda f: f is None }})
    r"""Average pace of the user during the workout"""  
    avg_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Average speed of the user during the workout"""  
    avg_torque_newton_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_torque_newton_meters'), 'exclude': lambda f: f is None }})
    r"""Average torque generated by the user during the workout - mainly relevant for cycling activities"""  
    avg_velocity_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_velocity_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Average velocity of the user during the workout - only calculated by certain providers, representing a separate quantity from speed"""  
    cadence_samples: Optional[list[shared_cadencesample.CadenceSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cadence_samples'), 'exclude': lambda f: f is None }})
    r"""Array of cadence values recorded throughout the workout, sampled at intervals determined by the fitness data provider"""  
    max_cadence_rpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_cadence_rpm'), 'exclude': lambda f: f is None }})
    r"""Maximum cadence of the user during the workout - mainly relevant for cycling activities"""  
    max_pace_minutes_per_kilometer: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_pace_minutes_per_kilometer'), 'exclude': lambda f: f is None }})
    r"""Maximum pace of the user during the workout"""  
    max_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Maximum speed of the user during the workout"""  
    max_torque_newton_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_torque_newton_meters'), 'exclude': lambda f: f is None }})
    r"""Maximum torque generated by the user during the workout - mainly relevant for cycling activities"""  
    max_velocity_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_velocity_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Maximum velocity of the user during the workout - only calculated by certain providers, representing a separate quantity from speed"""  
    normalized_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('normalized_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Average normalized speed of the user during the workout - only calculated by certain providers, representing a separate quantity from speed"""  
    speed_samples: Optional[list[shared_speedsample.SpeedSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed_samples'), 'exclude': lambda f: f is None }})
    r"""Array of the datapoints for the user's speed sampled throughout the workout"""  
    torque_samples: Optional[list[shared_torquesample.TorqueSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('torque_samples'), 'exclude': lambda f: f is None }})
    r"""Array of the datapoints for the user's torque sampled throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityOxygenData:
    r"""Object containing information on oxygen-related metrics for the workout"""
    
    avg_saturation_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_saturation_percentage'), 'exclude': lambda f: f is None }})
    r"""Average Oxygen Saturation percentage of the user during the workout (SpO2 or SmO2)"""  
    saturation_samples: Optional[list[shared_oxygensaturationsample.OxygenSaturationSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturation_samples'), 'exclude': lambda f: f is None }})
    r"""Array of Oxygen Saturation percentage datapoints sampled throughout the workout"""  
    vo2_samples: Optional[list[shared_vo2maxsample.Vo2MaxSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vo2_samples'), 'exclude': lambda f: f is None }})
    r"""Array of VO2 datapoints sampled throughout the workout"""  
    vo2max_ml_per_min_per_kg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vo2max_ml_per_min_per_kg'), 'exclude': lambda f: f is None }})
    r"""VO2Max for the given user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityPolylineMapData:
    r"""Object containing polyline-representation map data, plotting the user's trajectory throughout the workout"""
    
    summary_polyline: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_polyline'), 'exclude': lambda f: f is None }})
    r"""The polyline representation of the user's trajectory throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityPositionData:
    r"""Object containing information on the user's position throughout the workout"""
    
    center_pos_lat_lng_deg: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('center_pos_lat_lng_deg'), 'exclude': lambda f: f is None }})
    r"""Position of the user at the midway point of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable"""  
    end_pos_lat_lng_deg: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_pos_lat_lng_deg'), 'exclude': lambda f: f is None }})
    r"""Position of the user at the end of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable"""  
    position_samples: Optional[list[shared_positionsample.PositionSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position_samples'), 'exclude': lambda f: f is None }})
    r"""Array of datapoints of the position of the user, sampled throughout the workout"""  
    start_pos_lat_lng_deg: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_pos_lat_lng_deg'), 'exclude': lambda f: f is None }})
    r"""Position of the user at the start of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityPowerData:
    r"""Object containing information on the power generated by the user during the workout"""
    
    avg_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_watts'), 'exclude': lambda f: f is None }})
    r"""Average power output of the user during the workout"""  
    max_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_watts'), 'exclude': lambda f: f is None }})
    r"""Maximum power output of the user during the workout"""  
    power_samples: Optional[list[shared_powersample.PowerSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power_samples'), 'exclude': lambda f: f is None }})
    r"""Array containing datapoints of the power output of the user sampled throughout the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityStrainData:
    r"""Object containing information on the cardiovascular strain imposed on the user during the workout"""
    
    strain_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strain_level'), 'exclude': lambda f: f is None }})
    r"""Strain level achieved by the user for the given workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ActivityWorkData:
    r"""Object containing information on the work output of the user during the workout"""
    
    work_kilojoules: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_kilojoules'), 'exclude': lambda f: f is None }})
    r"""Total work output of the user for the workout"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Activity:
    
    active_durations_data: Optional[ActivityActiveDurationsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_durations_data'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent at various intensities during the workout, as reported by the Fitness Data provider"""  
    calories_data: Optional[ActivityCaloriesData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calories_data'), 'exclude': lambda f: f is None }})
    r"""Object containing calorie-related information for the user during the specific workout"""  
    cheat_detection: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cheat_detection'), 'exclude': lambda f: f is None }})
    r"""Cheat detection flag"""  
    device_data: Optional[ActivityDeviceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the device which recorded the specific workout"""  
    distance_data: Optional[ActivityDistanceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information related to distance covered during the associated workout"""  
    energy_data: Optional[ActivityEnergyData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('energy_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the energy expended by the user during the workout"""  
    heart_rate_data: Optional[ActivityHeartRateData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heart_rate_data'), 'exclude': lambda f: f is None }})
    r"""Object containing heartrate-related information for the workout"""  
    lap_data: Optional[ActivityLapData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lap_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on data for each lap performed by the user - mostly relates to track & field running activities, and swimming activities"""  
    met_data: Optional[ActivityMETData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MET_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the Metabolic Equivalent of Task for the workout"""  
    metadata: Optional[ActivityMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Object containing workout metadata"""  
    movement_data: Optional[ActivityMovementData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('movement_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's movement throughout the workout"""  
    oxygen_data: Optional[ActivityOxygenData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oxygen_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on oxygen-related metrics for the workout"""  
    polyline_map_data: Optional[ActivityPolylineMapData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polyline_map_data'), 'exclude': lambda f: f is None }})
    r"""Object containing polyline-representation map data, plotting the user's trajectory throughout the workout"""  
    position_data: Optional[ActivityPositionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the user's position throughout the workout"""  
    power_data: Optional[ActivityPowerData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the power generated by the user during the workout"""  
    strain_data: Optional[ActivityStrainData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strain_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the cardiovascular strain imposed on the user during the workout"""  
    tss_data: Optional[ActivityTSSData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TSS_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the stress put on the user's body from a workout"""  
    work_data: Optional[ActivityWorkData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('work_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the work output of the user during the workout"""  
    