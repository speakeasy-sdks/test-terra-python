"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import activitylevelsample as shared_activitylevelsample
from ..shared import caloriesample as shared_caloriesample
from ..shared import distancesample as shared_distancesample
from ..shared import elevationsample as shared_elevationsample
from ..shared import floorsclimbedsample as shared_floorsclimbedsample
from ..shared import heartratedatasample as shared_heartratedatasample
from ..shared import heartratevariabilitydatasamplermssd as shared_heartratevariabilitydatasamplermssd
from ..shared import heartratevariabilitydatasamplesdnn as shared_heartratevariabilitydatasamplesdnn
from ..shared import heartratezone as shared_heartratezone
from ..shared import metsample as shared_metsample
from ..shared import otherdevicedata as shared_otherdevicedata
from ..shared import oxygensaturationsample as shared_oxygensaturationsample
from ..shared import stepsample as shared_stepsample
from ..shared import tagentry as shared_tagentry
from ..shared import vo2maxsample as shared_vo2maxsample
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyMETData:
    r"""Object containing information on the Metabolic Equivalent of Task for the day"""
    
    avg_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_level'), 'exclude': lambda f: f is None }})
    r"""The average MET level of the activity"""  
    met_samples: Optional[list[shared_metsample.METSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MET_samples'), 'exclude': lambda f: f is None }})
    r"""An array of Metabolic Equivalent Time samples, as calculated by the user's wearable"""  
    num_high_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_high_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in High Intensity during the day - based off MET scale"""  
    num_inactive_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_inactive_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in state of Inactivity during the day - based off MET scale"""  
    num_low_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_low_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in Low Intensity during the day - based off MET scale"""  
    num_moderate_intensity_minutes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_moderate_intensity_minutes'), 'exclude': lambda f: f is None }})
    r"""Number of minutes spent in Moderate Intensity during the day - based off MET scale"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyActiveDurationsData:
    r"""Object containing information related to the time spent in different activity intensities during over the day"""
    
    activity_levels_samples: Optional[list[shared_activitylevelsample.ActivityLevelSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_levels_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of the intensity the user was in at various points during the day"""  
    activity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in an active state during the day"""  
    inactivity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactivity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in an inactive state during the day"""  
    low_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('low_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a low intensity state during the day"""  
    moderate_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moderate_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a moderate intensity state during the day"""  
    num_continuous_inactive_periods: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_continuous_inactive_periods'), 'exclude': lambda f: f is None }})
    r"""Maximum number of continuous periods spent in an inactive state during the day"""  
    rest_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rest_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent resting during the day"""  
    vigorous_intensity_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vigorous_intensity_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a state of vigorous intensity during the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyCaloriesData:
    r"""Object containing calorie-related information for the user during the specific day"""
    
    bmr_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BMR_calories'), 'exclude': lambda f: f is None }})
    r"""BMR of the user on the specific day, which contributes to the total calories burned during the day"""  
    calorie_samples: Optional[list[shared_caloriesample.CalorieSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calorie_samples'), 'exclude': lambda f: f is None }})
    r"""Detailed samples of cumulative calories burned at various timestamps over the period of the day"""  
    net_activity_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_activity_calories'), 'exclude': lambda f: f is None }})
    r"""Net calorie burn coming just from exercise, excluding BMR"""  
    net_intake_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_intake_calories'), 'exclude': lambda f: f is None }})
    r"""Net intake of calories during the period of the day"""  
    total_burned_calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_burned_calories'), 'exclude': lambda f: f is None }})
    r"""Total number of calories burned during the day, including BMR"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyDeviceData:
    r"""Object containing information on the device which recorded data for the day"""
    
    activation_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activation_timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Activation timestamp of the device, if applicable"""  
    hardware_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hardware_version'), 'exclude': lambda f: f is None }})
    r"""Hardware version of the device"""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Device manufacturer name"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device name - note that this can also be the name of the application/package which the data comes from, if coming from a data aggregator such as Google Fit"""  
    other_devices: Optional[list[shared_otherdevicedata.OtherDeviceData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('other_devices'), 'exclude': lambda f: f is None }})
    r"""Data pertaining to other devices which may have contributed data for this workout"""  
    serial_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial_number'), 'exclude': lambda f: f is None }})
    r"""Device Serial Number"""  
    software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('software_version'), 'exclude': lambda f: f is None }})
    r"""Device Software Version"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyDistanceDataDetailed:
    r"""Object containing detailed distance information - this may included second-by-second samples"""
    
    distance_samples: Optional[list[shared_distancesample.DistanceSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of distance covered throughout the day"""  
    elevation_samples: Optional[list[shared_elevationsample.ElevationSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of elevation throughout the day"""  
    floors_climbed_samples: Optional[list[shared_floorsclimbedsample.FloorsClimbedSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floors_climbed_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of floors climbed throughout the day, as determined by the fitness data provider"""  
    step_samples: Optional[list[shared_stepsample.StepSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step_samples'), 'exclude': lambda f: f is None }})
    r"""Array of detailed samples of steps performed throughout the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyDistanceDataElevation:
    r"""Average elevation of the user throughout the day"""
    
    avg_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_meters'), 'exclude': lambda f: f is None }})
    r"""Average elevation of the user throughout the day"""  
    gain_actual_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gain_actual_meters'), 'exclude': lambda f: f is None }})
    r"""Planned elevation gain for the day"""  
    gain_planned_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gain_planned_meters'), 'exclude': lambda f: f is None }})
    r"""Elevation gain of the user throughout the day - this includes all elevation gain, and does _not_ represent net gain"""  
    loss_actual_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loss_actual_meters'), 'exclude': lambda f: f is None }})
    r"""Elevation loss of the user throughout the day"""  
    max_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_meters'), 'exclude': lambda f: f is None }})
    r"""Maximum elevation of the user during the day"""  
    min_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_meters'), 'exclude': lambda f: f is None }})
    r"""Minimum elevation of the user during the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyDistanceDataSwimming:
    r"""Summary information of the user's swimming statistics for the day, if applicable"""
    
    num_laps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_laps'), 'exclude': lambda f: f is None }})
    r"""Total number of swimming laps performed during the day"""  
    num_strokes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_strokes'), 'exclude': lambda f: f is None }})
    r"""Total number of swimming strokes performed during the day"""  
    pool_length_meters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pool_length_meters'), 'exclude': lambda f: f is None }})
    r"""Pool length for associated with the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyDistanceData:
    r"""Object containing information related to distance covered during the associated day"""
    
    detailed: Optional[DailyDistanceDataDetailed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailed'), 'exclude': lambda f: f is None }})
    r"""Object containing detailed distance information - this may included second-by-second samples"""  
    distance_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_meters'), 'exclude': lambda f: f is None }})
    r"""Total distance covered by the user throughout the day"""  
    elevation: Optional[DailyDistanceDataElevation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation'), 'exclude': lambda f: f is None }})
    r"""Average elevation of the user throughout the day"""  
    floors_climbed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floors_climbed'), 'exclude': lambda f: f is None }})
    r"""Total number of elevation gain in floors climbed equivalent throughout the day, as determined by the fitness data provider"""  
    steps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})
    r"""Total number of steps performed during the day"""  
    swimming: Optional[DailyDistanceDataSwimming] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('swimming'), 'exclude': lambda f: f is None }})
    r"""Summary information of the user's swimming statistics for the day, if applicable"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyHeartRateDataDetailed:
    r"""Object containing detailed heart rate information for the associated day"""
    
    hr_samples: Optional[list[shared_heartratedatasample.HeartRateDataSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_samples'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate data samples recorded for the user during the day"""  
    hrv_samples_rmssd: Optional[list[shared_heartratevariabilitydatasamplermssd.HeartRateVariabilityDataSampleRMSSD]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_rmssd'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the day, computed using RMSSD"""  
    hrv_samples_sdnn: Optional[list[shared_heartratevariabilitydatasamplesdnn.HeartRateVariabilityDataSampleSDNN]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrv_samples_sdnn'), 'exclude': lambda f: f is None }})
    r"""Array of HeartRate Variability data samples recorded for the user during the day, computed using SDNN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyHeartRateDataSummary:
    r"""Object containing summary information for the associated day"""
    
    avg_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate of the user during the day"""  
    avg_hrv_rmssd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_rmssd'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the day, computed using RMSSD"""  
    avg_hrv_sdnn: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hrv_sdnn'), 'exclude': lambda f: f is None }})
    r"""Average HeartRate Variability of the user during the day, computed using SDNN"""  
    hr_zone_data: Optional[list[shared_heartratezone.HeartRateZone]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_zone_data'), 'exclude': lambda f: f is None }})
    r"""Array of time spent in various HR zones throughout the day"""  
    max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Maximum HeartRate of the user during the day"""  
    min_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Minimum HeartRate of the user during the day"""  
    resting_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resting_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Resting HeartRate of the user, as determined by the fitness data provider"""  
    user_max_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_max_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""User's maximum HeartRate based on their age, and other factors as determined by the fitness data provider"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyHeartRateData:
    r"""Object containing heartrate-related information for the day"""
    
    detailed: Optional[DailyHeartRateDataDetailed] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailed'), 'exclude': lambda f: f is None }})
    r"""Object containing detailed heart rate information for the associated day"""  
    summary: Optional[DailyHeartRateDataSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Object containing summary information for the associated day"""  
    
class DailyMetadataUploadTypeEnum(str, Enum):
    r"""The upload type for data in the associated day, providing information on whether data was automatically uploaded or user-entered. If any data point in a day is altered, the day should be classed as manual"""
    UNKNOWN = 'UNKNOWN'
    AUTOMATIC = 'AUTOMATIC'
    MANUAL = 'MANUAL'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'
    PENDING = 'PENDING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyMetadata:
    r"""Object containing daily summary metadata"""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the associated day, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h after start_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the associated day, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    upload_type: Optional[DailyMetadataUploadTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_type'), 'exclude': lambda f: f is None }})
    r"""The upload type for data in the associated day, providing information on whether data was automatically uploaded or user-entered. If any data point in a day is altered, the day should be classed as manual"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyOxygenData:
    r"""Object containing information on oxygen-related metrics for the day"""
    
    avg_saturation_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_saturation_percentage'), 'exclude': lambda f: f is None }})
    r"""Average Oxygen Saturation percentage of the user during the day (SpO2 or SmO2)"""  
    saturation_samples: Optional[list[shared_oxygensaturationsample.OxygenSaturationSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturation_samples'), 'exclude': lambda f: f is None }})
    r"""Array of Oxygen Saturation percentage datapoints sampled throughout the day"""  
    vo2_samples: Optional[list[shared_vo2maxsample.Vo2MaxSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vo2_samples'), 'exclude': lambda f: f is None }})
    r"""Array of VO2 datapoints sampled throughout the day"""  
    vo2max_ml_per_min_per_kg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vo2max_ml_per_min_per_kg'), 'exclude': lambda f: f is None }})
    r"""VO2Max for the given user"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyScores:
    r"""Scores for the user's performance on different metrics for the given day, as calculated by the fitness data provider"""
    
    activity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity'), 'exclude': lambda f: f is None }})
    r"""Activity score for the given day"""  
    recovery: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recovery'), 'exclude': lambda f: f is None }})
    r"""Recovery score for the given day"""  
    sleep: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sleep'), 'exclude': lambda f: f is None }})
    r"""Sleep score for the given day, pertaining to the previous night's sleep"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyStrainData:
    r"""Object containing information on the strain put on the user's body over a day"""
    
    strain_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strain_level'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the cardiovascular strain imposed on the user during the day."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyStressData:
    r"""Object containing information on the stress put on the user over a day"""
    
    activity_stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a stressed state while active during the day"""  
    avg_stress_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_stress_level'), 'exclude': lambda f: f is None }})
    r"""Average stress level for the day"""  
    high_stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('high_stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a state of high stress during the day"""  
    low_stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('low_stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a state of low stress during the day"""  
    max_stress_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_stress_level'), 'exclude': lambda f: f is None }})
    r"""Maximum stress level recorded during the day"""  
    medium_stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('medium_stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a state of medium stress during the day"""  
    rest_stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rest_stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a stressed state while at rest during the day"""  
    samples: Optional[list[shared_stepsample.StepSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samples'), 'exclude': lambda f: f is None }})
    r"""Array of stress level data points sampled throughout the day"""  
    stress_duration_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stress_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Total number of seconds spent in a stressed state while at rest during the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DailyTagData:
    r"""Object containing all user-entered or automatically tagged events in the day"""
    
    tags: Optional[list[shared_tagentry.TagEntry]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Array of user-entered tags for the day"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Daily:
    
    active_durations_data: Optional[DailyActiveDurationsData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_durations_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information related to the time spent in different activity intensities during over the day"""  
    calories_data: Optional[DailyCaloriesData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calories_data'), 'exclude': lambda f: f is None }})
    r"""Object containing calorie-related information for the user during the specific day"""  
    device_data: Optional[DailyDeviceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the device which recorded data for the day"""  
    distance_data: Optional[DailyDistanceData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information related to distance covered during the associated day"""  
    heart_rate_data: Optional[DailyHeartRateData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heart_rate_data'), 'exclude': lambda f: f is None }})
    r"""Object containing heartrate-related information for the day"""  
    met_data: Optional[DailyMETData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MET_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the Metabolic Equivalent of Task for the day"""  
    metadata: Optional[DailyMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Object containing daily summary metadata"""  
    oxygen_data: Optional[DailyOxygenData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oxygen_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on oxygen-related metrics for the day"""  
    scores: Optional[DailyScores] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scores'), 'exclude': lambda f: f is None }})
    r"""Scores for the user's performance on different metrics for the given day, as calculated by the fitness data provider"""  
    strain_data: Optional[DailyStrainData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('strain_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the strain put on the user's body over a day"""  
    stress_data: Optional[DailyStressData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stress_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on the stress put on the user over a day"""  
    tag_data: Optional[DailyTagData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_data'), 'exclude': lambda f: f is None }})
    r"""Object containing all user-entered or automatically tagged events in the day"""  
    