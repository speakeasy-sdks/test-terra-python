"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import menstruationflowsample as shared_menstruationflowsample
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MenstruationMenstruationData:
    r"""Object containing information on user's menstruation for a given day"""
    
    current_phase: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_phase'), 'exclude': lambda f: f is None }})
    r"""Phase in associated cycle, (i.e. menstruation, fertile etc)"""  
    cycle_length_days: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycle_length_days'), 'exclude': lambda f: f is None }})
    r"""Total cycle length"""  
    day_in_cycle: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day_in_cycle'), 'exclude': lambda f: f is None }})
    r"""Number of day in cycle this object is associated with"""  
    days_until_next_phase: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('days_until_next_phase'), 'exclude': lambda f: f is None }})
    r"""Number of days to reach the next phase (predicted)"""  
    is_predicted_cycle: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_predicted_cycle'), 'exclude': lambda f: f is None }})
    r"""Flag indicating whether associated object is a prediction or user-logged information"""  
    last_updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_updated_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last time when the user recorded information regarding their cycle, in ISO8601 format, with microseconds precision"""  
    length_of_current_phase_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length_of_current_phase_days'), 'exclude': lambda f: f is None }})
    r"""Length of current phase"""  
    menstruation_flow: Optional[list[shared_menstruationflowsample.MenstruationFlowSample]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('menstruation_flow'), 'exclude': lambda f: f is None }})
    r"""List of user logs of information related to the strength of user's menstrual flow"""  
    period_length_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period_length_days'), 'exclude': lambda f: f is None }})
    r"""Total length of period (i.e. menstrual bleeding)"""  
    period_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period_start_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date of menstrual cycle, in ISO8601 format"""  
    predicted_cycle_length_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predicted_cycle_length_days'), 'exclude': lambda f: f is None }})
    r"""Prediction of the cycle's total length"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MenstruationMetadata:
    r"""Object containing daily summary metadata"""
    
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the associated day, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h after start_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the associated day, in ISO8601 format with microsecond precision. Will always fall on midnight of any given day, and will always be equal to 24h before end_time. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Menstruation:
    
    menstruation_data: Optional[MenstruationMenstruationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('menstruation_data'), 'exclude': lambda f: f is None }})
    r"""Object containing information on user's menstruation for a given day"""  
    metadata: Optional[MenstruationMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Object containing daily summary metadata"""  
    