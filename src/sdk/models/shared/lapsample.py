"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class LapSampleStrokeTypeEnum(str, Enum):
    r"""Stroke type - only relevant for swimming activities"""
    OTHER = 'OTHER'
    FREESTYLE = 'FREESTYLE'
    BACKSTROKE = 'BACKSTROKE'
    BREASTSTROKE = 'BREASTSTROKE'
    BUTTERFLY = 'BUTTERFLY'
    REST = 'REST'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LapSample:
    
    avg_hr_bpm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_hr_bpm'), 'exclude': lambda f: f is None }})
    r"""Average heart rate in bpm, for the Lap sample"""  
    avg_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Average speed of the user during the lap"""  
    calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calories'), 'exclude': lambda f: f is None }})
    r"""Calories burned during the lap"""  
    distance_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_meters'), 'exclude': lambda f: f is None }})
    r"""Distance covered during the lap"""  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end time of the associated lap, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start time of the associated lap, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    stroke_type: Optional[LapSampleStrokeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stroke_type'), 'exclude': lambda f: f is None }})
    r"""Stroke type - only relevant for swimming activities"""  
    total_strokes: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_strokes'), 'exclude': lambda f: f is None }})
    r"""Total strokes performed during the lap - only relevant for swimming activities"""  
    