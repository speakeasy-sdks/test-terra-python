"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class PlannedWorkoutMetadataTypeEnum(str, Enum):
    r"""The name - either user-entered or given by the fitness data provider - of the associated workout plan"""
    IN_VEHICLE = 'IN_VEHICLE'
    BIKING = 'BIKING'
    STILL = 'STILL'
    UNKNOWN = 'UNKNOWN'
    TILTING = 'TILTING'
    WALKING = 'WALKING'
    RUNNING = 'RUNNING'
    AEROBICS = 'AEROBICS'
    BADMINTON = 'BADMINTON'
    BASEBALL = 'BASEBALL'
    BASKETBALL = 'BASKETBALL'
    BIATHLON = 'BIATHLON'
    HANDBIKING = 'HANDBIKING'
    MOUNTAIN_BIKING = 'MOUNTAIN_BIKING'
    ROAD_BIKING = 'ROAD_BIKING'
    SPINNING = 'SPINNING'
    STATIONARY_BIKING = 'STATIONARY_BIKING'
    UTILITY_BIKING = 'UTILITY_BIKING'
    BOXING = 'BOXING'
    CALISTHENICS = 'CALISTHENICS'
    CIRCUIT_TRAINING = 'CIRCUIT_TRAINING'
    CRICKET = 'CRICKET'
    DANCING = 'DANCING'
    ELLIPTICAL = 'ELLIPTICAL'
    FENCING = 'FENCING'
    AMERICAN_FOOTBALL = 'AMERICAN_FOOTBALL'
    AUSTRALIAN_FOOTBALL = 'AUSTRALIAN_FOOTBALL'
    ENGLISH_FOOTBALL = 'ENGLISH_FOOTBALL'
    FRISBEE = 'FRISBEE'
    GARDENING = 'GARDENING'
    GOLF = 'GOLF'
    GYMNASTICS = 'GYMNASTICS'
    HANDBALL = 'HANDBALL'
    HIKING = 'HIKING'
    HOCKEY = 'HOCKEY'
    HORSEBACK_RIDING = 'HORSEBACK_RIDING'
    HOUSEWORK = 'HOUSEWORK'
    JUMPING_ROPE = 'JUMPING_ROPE'
    KAYAKING = 'KAYAKING'
    KETTLEBELL_TRAINING = 'KETTLEBELL_TRAINING'
    KICKBOXING = 'KICKBOXING'
    KITESURFING = 'KITESURFING'
    MARTIAL_ARTS = 'MARTIAL_ARTS'
    MEDITATION = 'MEDITATION'
    MIXED_MARTIAL_ARTS = 'MIXED_MARTIAL_ARTS'
    P90_X_EXERCISES = 'P90X_EXERCISES'
    PARAGLIDING = 'PARAGLIDING'
    PILATES = 'PILATES'
    POLO = 'POLO'
    RACQUETBALL = 'RACQUETBALL'
    ROCK_CLIMBING = 'ROCK_CLIMBING'
    ROWING = 'ROWING'
    ROWING_MACHINE = 'ROWING_MACHINE'
    RUGBY = 'RUGBY'
    JOGGING = 'JOGGING'
    RUNNING_ON_SAND = 'RUNNING_ON_SAND'
    TREADMILL_RUNNING = 'TREADMILL_RUNNING'
    SAILING = 'SAILING'
    SCUBA_DIVING = 'SCUBA_DIVING'
    SKATEBOARDING = 'SKATEBOARDING'
    SKATING = 'SKATING'
    CROSS_SKATING = 'CROSS_SKATING'
    INDOOR_ROLLERBLADING = 'INDOOR_ROLLERBLADING'
    SKIING = 'SKIING'
    BACK_COUNTRY_SKIING = 'BACK_COUNTRY_SKIING'
    CROSS_COUNTRY_SKIING = 'CROSS_COUNTRY_SKIING'
    DOWNHILL_SKIING = 'DOWNHILL_SKIING'
    KITE_SKIING = 'KITE_SKIING'
    ROLLER_SKIING = 'ROLLER_SKIING'
    SLEDDING = 'SLEDDING'
    SNOWBOARDING = 'SNOWBOARDING'
    SNOWMOBILE = 'SNOWMOBILE'
    SNOWSHOEING = 'SNOWSHOEING'
    SQUASH = 'SQUASH'
    STAIR_CLIMBING = 'STAIR_CLIMBING'
    STAIR_CLIMBING_MACHINE = 'STAIR_CLIMBING_MACHINE'
    STAND_UP_PADDLEBOARDING = 'STAND_UP_PADDLEBOARDING'
    STRENGTH_TRAINING = 'STRENGTH_TRAINING'
    SURFING = 'SURFING'
    SWIMMING = 'SWIMMING'
    SWIMMING_SWIMMING_POOL = 'SWIMMING_SWIMMING_POOL'
    SWIMMING_OPEN_WATER = 'SWIMMING_OPEN_WATER'
    TABLE_TENNIS = 'TABLE_TENNIS'
    TEAM_SPORTS = 'TEAM_SPORTS'
    TENNIS = 'TENNIS'
    TREADMILL = 'TREADMILL'
    VOLLEYBALL = 'VOLLEYBALL'
    VOLLEYBALL_BEACH = 'VOLLEYBALL_BEACH'
    VOLLEYBALL_INDOOR = 'VOLLEYBALL_INDOOR'
    WAKEBOARDING = 'WAKEBOARDING'
    WALKING_FITNESS = 'WALKING_FITNESS'
    NORDIC_WALKING = 'NORDIC_WALKING'
    WALKING_TREADMILL = 'WALKING_TREADMILL'
    WATERPOLO = 'WATERPOLO'
    WEIGHTLIFTING = 'WEIGHTLIFTING'
    WHEELCHAIR = 'WHEELCHAIR'
    WINDSURFING = 'WINDSURFING'
    YOGA = 'YOGA'
    ZUMBA = 'ZUMBA'
    DIVING = 'DIVING'
    ERGOMETER = 'ERGOMETER'
    ICE_SKATING = 'ICE_SKATING'
    INDOOR_SKATING = 'INDOOR_SKATING'
    CURLING = 'CURLING'
    OTHER = 'OTHER'
    CROSSFIT = 'CROSSFIT'
    HIIT = 'HIIT'
    INTERVAL_TRAINING = 'INTERVAL_TRAINING'
    WALKING_STROLLER = 'WALKING_STROLLER'
    ELEVATOR = 'ELEVATOR'
    ESCALATOR = 'ESCALATOR'
    ARCHERY = 'ARCHERY'
    SOFTBALL = 'SOFTBALL'
    GUIDED_BREATHING = 'GUIDED_BREATHING'
    CARDIO_TRAINING = 'CARDIO_TRAINING'
    LACROSSE = 'LACROSSE'
    STRETCHING = 'STRETCHING'
    TRIATHLON = 'TRIATHLON'
    INLINE_SKATING = 'INLINE_SKATING'
    SKY_DIVING = 'SKY_DIVING'
    PADDLING = 'PADDLING'
    MOUNTAINEERING = 'MOUNTAINEERING'
    FISHING = 'FISHING'
    WATER_SKIING = 'WATER_SKIING'
    INDOOR_RUNNING = 'INDOOR_RUNNING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlannedWorkoutMetadata:
    r"""Metadata for the workout plan"""
    
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The creation datetime of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the workout"""  
    estimated_calories: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_calories'), 'exclude': lambda f: f is None }})
    r"""Estimated calorie burn for the workout"""  
    estimated_distance_meters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_distance_meters'), 'exclude': lambda f: f is None }})
    r"""Estimated distance for the workout"""  
    estimated_duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Estimated workout duration"""  
    estimated_elevation_gain_meters: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_elevation_gain_meters'), 'exclude': lambda f: f is None }})
    r"""Estimated elevation gain for the workout"""  
    estimated_energy_kj: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_energy_kj'), 'exclude': lambda f: f is None }})
    r"""Estimated energy expenditure for the workout"""  
    estimated_if: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_if'), 'exclude': lambda f: f is None }})
    r"""Estimated Intensity Factor for the workout"""  
    estimated_pace_minutes_per_kilometer: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_pace_minutes_per_kilometer'), 'exclude': lambda f: f is None }})
    r"""Estimated pace for the workout"""  
    estimated_speed_meters_per_second: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_speed_meters_per_second'), 'exclude': lambda f: f is None }})
    r"""Estimated speed for the workout"""  
    estimated_tscore: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_tscore'), 'exclude': lambda f: f is None }})  
    estimated_tss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_tss'), 'exclude': lambda f: f is None }})
    r"""Estimated Training Stress Score for the workout"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the workout plan"""  
    planned_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('planned_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The planned start datetime, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    pool_length_meters: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pool_length_meters'), 'exclude': lambda f: f is None }})
    r"""Pool length of the pool used for the workout - only relevant for swimming activity types"""  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""Name of the original source of the workout plan"""  
    type: Optional[PlannedWorkoutMetadataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The name - either user-entered or given by the fitness data provider - of the associated workout plan"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlannedWorkout:
    
    metadata: Optional[PlannedWorkoutMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata for the workout plan"""  
    steps: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('steps'), 'exclude': lambda f: f is None }})
    r"""List of exercises/steps/intervals for the workout plan"""  
    