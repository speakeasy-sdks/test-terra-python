"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeasurementDataSample:
    
    bmi: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BMI'), 'exclude': lambda f: f is None }})
    r"""User's Body Mass Index (BMI)"""  
    bmr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BMR'), 'exclude': lambda f: f is None }})
    r"""User's Basal Metabolic Rate - minimum amount of calories that a person's body needs to perform necessary functions"""  
    bodyfat_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bodyfat_percentage'), 'exclude': lambda f: f is None }})
    r"""User's body far percentage"""  
    bone_mass_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bone_mass_g'), 'exclude': lambda f: f is None }})
    r"""User's total bone mass"""  
    estimated_fitness_age: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_fitness_age'), 'exclude': lambda f: f is None }})
    r"""Estimate of how fit the user is compared to their actual age, as measured by the device"""  
    height_cm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height_cm'), 'exclude': lambda f: f is None }})
    r"""User's height"""  
    insulin_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insulin_type'), 'exclude': lambda f: f is None }})
    r"""Type of insulin administered to the user"""  
    insulin_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insulin_units'), 'exclude': lambda f: f is None }})
    r"""Quantity of insulin administered to the user"""  
    lean_mass_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lean_mass_g'), 'exclude': lambda f: f is None }})
    r"""Total lean mass of the user - calculated as the difference between total body weight and body fat weight"""  
    measurement_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurement_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time with which the record is associated, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    muscle_mass_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muscle_mass_g'), 'exclude': lambda f: f is None }})
    r"""User's total muscle mass (i.e. skeletal muscle mass)"""  
    rmr: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RMR'), 'exclude': lambda f: f is None }})
    r"""User's Resting Metabolic Rate - amount of energy that a person's body needs to function while at rest. RMR accounts for additional low-effort daily activities on top of basic body functions"""  
    skin_fold_mm: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skin_fold_mm'), 'exclude': lambda f: f is None }})
    r"""User's skin fold measurement"""  
    urine_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urine_color'), 'exclude': lambda f: f is None }})
    r"""Color of the user's urine"""  
    water_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('water_percentage'), 'exclude': lambda f: f is None }})
    r"""Total amount of fluid in the user's body"""  
    weight_kg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight_kg'), 'exclude': lambda f: f is None }})
    r"""User's body weight"""  
    