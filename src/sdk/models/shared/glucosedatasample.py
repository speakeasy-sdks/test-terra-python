"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GlucoseDataSampleGlucoseLevelFlagEnum(str, Enum):
    r"""Flag indicating state of user's blood glucose level"""
    NORMAL = 'NORMAL'
    HIGH = 'HIGH'
    LOW = 'LOW'

class GlucoseDataSampleTrendArrowEnum(str, Enum):
    r"""Flag indicating the current trend in the user's blood glucose level (e.g. rising, constant, falling)"""
    UNKNOWN = 'UNKNOWN'
    FALLING_QUICKLY = 'FALLING_QUICKLY'
    FALLING = 'FALLING'
    FLAT = 'FLAT'
    RISING = 'RISING'
    RISING_QUICKLY = 'RISING_QUICKLY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlucoseDataSample:
    
    blood_glucose_mg_per_d_l: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blood_glucose_mg_per_dL'), 'exclude': lambda f: f is None }})
    r"""User's blood glucose reading"""  
    glucose_level_flag: Optional[GlucoseDataSampleGlucoseLevelFlagEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('glucose_level_flag'), 'exclude': lambda f: f is None }})
    r"""Flag indicating state of user's blood glucose level"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time with which the record is associated, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time"""  
    trend_arrow: Optional[GlucoseDataSampleTrendArrowEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trend_arrow'), 'exclude': lambda f: f is None }})
    r"""Flag indicating the current trend in the user's blood glucose level (e.g. rising, constant, falling)"""  
    