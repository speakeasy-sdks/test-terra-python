"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MealMacros:
    r"""Macronutrient information for associated food"""
    
    alcohol_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alcohol_g'), 'exclude': lambda f: f is None }})
    r"""Alcohol content of the associated food(s)"""  
    calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calories'), 'exclude': lambda f: f is None }})
    r"""Calorie content of the associated food(s)"""  
    carbohydrates_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carbohydrates_g'), 'exclude': lambda f: f is None }})
    r"""Carbohydrates content of the associated food(s)"""  
    cholesterol_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cholesterol_mg'), 'exclude': lambda f: f is None }})
    r"""Cholesterol content of the associated food(s)"""  
    fat_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fat_g'), 'exclude': lambda f: f is None }})
    r"""Fat content of the associated food(s)"""  
    fiber_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiber_g'), 'exclude': lambda f: f is None }})
    r"""Fiber content of the associated food(s)"""  
    net_carbohydrates_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('net_carbohydrates_g'), 'exclude': lambda f: f is None }})
    r"""Net carbs content of the associated food(s)"""  
    protein_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protein_g'), 'exclude': lambda f: f is None }})
    r"""Protein content of the associated food(s)"""  
    saturated_fat_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saturated_fat_g'), 'exclude': lambda f: f is None }})
    r"""Saturated fat content of the associated food(s)"""  
    sodium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sodium_mg'), 'exclude': lambda f: f is None }})
    r"""Sodium content of the associated food(s)"""  
    sugar_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sugar_g'), 'exclude': lambda f: f is None }})
    r"""Sugar content of the associated food(s)"""  
    trans_fat_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trans_fat_g'), 'exclude': lambda f: f is None }})
    r"""Trans fat content of the associated food(s)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MealMicros:
    r"""Micronutrient information for associated food"""
    
    biotin_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('biotin_mg'), 'exclude': lambda f: f is None }})
    r"""Biotin content of the associated food(s)"""  
    caffeine_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caffeine_mg'), 'exclude': lambda f: f is None }})
    r"""Caffeine content of the associated food(s)"""  
    calcium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calcium_mg'), 'exclude': lambda f: f is None }})
    r"""Calcium content of the associated food(s)"""  
    chloride_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chloride_mg'), 'exclude': lambda f: f is None }})
    r"""Chloride content of the associated food(s)"""  
    chromium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chromium_mg'), 'exclude': lambda f: f is None }})
    r"""Chromium content of the associated food(s)"""  
    copper_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copper_mg'), 'exclude': lambda f: f is None }})
    r"""Copper content of the associated food(s)"""  
    cystine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cystine_g'), 'exclude': lambda f: f is None }})
    r"""Cystine content of the associated food(s)"""  
    folate_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folate_mg'), 'exclude': lambda f: f is None }})
    r"""Folate content of the associated food(s)"""  
    folic_acid_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folic_acid_mg'), 'exclude': lambda f: f is None }})
    r"""Folic Acid content of the associated food(s)"""  
    histidine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('histidine_g'), 'exclude': lambda f: f is None }})
    r"""Histidine content of the associated food(s)"""  
    iodine_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iodine_mg'), 'exclude': lambda f: f is None }})
    r"""Iodine content of the associated food(s)"""  
    iron_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iron_mg'), 'exclude': lambda f: f is None }})
    r"""Iron content of the associated food(s)"""  
    isoleucine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isoleucine_g'), 'exclude': lambda f: f is None }})
    r"""Isoleucine content of the associated food(s)"""  
    leucine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leucine_g'), 'exclude': lambda f: f is None }})
    r"""Leucine content of the associated food(s)"""  
    lysine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lysine_g'), 'exclude': lambda f: f is None }})
    r"""Lysine content of the associated food(s)"""  
    magnesium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('magnesium_mg'), 'exclude': lambda f: f is None }})
    r"""Magnesium content of the associated food(s)"""  
    manganese_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manganese_mg'), 'exclude': lambda f: f is None }})
    r"""Manganese content of the associated food(s)"""  
    methionine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methionine_g'), 'exclude': lambda f: f is None }})
    r"""Methionine content of the associated food(s)"""  
    molybdenum_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('molybdenum_mg'), 'exclude': lambda f: f is None }})
    r"""Molybdenum content of the associated food(s)"""  
    monounsaturated_fat_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monounsaturated_fat_g'), 'exclude': lambda f: f is None }})
    r"""Monounsaturated fat content of the associated food(s)"""  
    niacin_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('niacin_mg'), 'exclude': lambda f: f is None }})
    r"""Niacin content of the associated food(s)"""  
    omega3_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omega3_g'), 'exclude': lambda f: f is None }})
    r"""Omega3 content of the associated food(s)"""  
    omega6_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('omega6_g'), 'exclude': lambda f: f is None }})
    r"""Omega6 content of the associated food(s)"""  
    pantothenic_acid_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pantothenic_acid_mg'), 'exclude': lambda f: f is None }})
    r"""Pantothenic content of the associated food(s)"""  
    phenylalanine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phenylalanine_g'), 'exclude': lambda f: f is None }})
    r"""Phenylalanine content of the associated food(s)"""  
    phosphorus_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phosphorus_mg'), 'exclude': lambda f: f is None }})
    r"""Phosphorus content of the associated food(s)"""  
    polyunsaturated_fat_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('polyunsaturated_fat_g'), 'exclude': lambda f: f is None }})
    r"""Polyunsaturated fat content of the associated food(s)"""  
    potassium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('potassium_mg'), 'exclude': lambda f: f is None }})
    r"""Potassium content of the associated food(s)"""  
    riboflavin_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riboflavin_mg'), 'exclude': lambda f: f is None }})
    r"""Riboflavin content of the associated food(s)"""  
    selenium_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selenium_mg'), 'exclude': lambda f: f is None }})
    r"""Selenium content of the associated food(s)"""  
    starch_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starch_g'), 'exclude': lambda f: f is None }})
    r"""Starch content of the associated food(s)"""  
    thiamin_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thiamin_mg'), 'exclude': lambda f: f is None }})
    r"""Thiamin content of the associated food(s)"""  
    threonine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threonine_g'), 'exclude': lambda f: f is None }})
    r"""Threonine content of the associated food(s)"""  
    tryptophan_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tryptophan_g'), 'exclude': lambda f: f is None }})
    r"""Tryptophan content of the associated food(s)"""  
    tyrosine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tyrosine_g'), 'exclude': lambda f: f is None }})
    r"""Tyrosine content of the associated food(s)"""  
    valine_g: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valine_g'), 'exclude': lambda f: f is None }})
    r"""Valine content of the associated food(s)"""  
    vitamin_a_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_A_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin A content of the associated food(s)"""  
    vitamin_b12_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_B12_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin B12 content of the associated food(s)"""  
    vitamin_b6_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_B6_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin B6 content of the associated food(s)"""  
    vitamin_c_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_C_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin C content of the associated food(s)"""  
    vitamin_d_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_D_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin D content of the associated food(s)"""  
    vitamin_d2_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_D2_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin D2 content of the associated food(s)"""  
    vitamin_d3_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_D3_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin D3 content of the associated food(s)"""  
    vitamin_e_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_E_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin E content of the associated food(s)"""  
    vitamin_k_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vitamin_K_mg'), 'exclude': lambda f: f is None }})
    r"""Vitamin K content of the associated food(s)"""  
    zinc_mg: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zinc_mg'), 'exclude': lambda f: f is None }})
    r"""Zinc content of the associated food(s)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MealQuantity:
    r"""Quantity of the food that was consumed, containing information on amount & units in which this was recorded"""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""Amount of food, measured in unit defined in this object"""  
    unit: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""Name of the unit of measurement"""  
    
class MealTypeEnum(str, Enum):
    r"""Enum representing the category the consumed food/meal falls under (i.e. Breakfast/Lunch/Dinner etc"""
    UNKNOWN = 'UNKNOWN'
    BREAKFAST = 'BREAKFAST'
    MORNING_SNACK = 'MORNING_SNACK'
    LUNCH = 'LUNCH'
    AFTERNOON_SNACK = 'AFTERNOON_SNACK'
    DINNER = 'DINNER'
    SNACK = 'SNACK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Meal:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier for food logged by the user"""  
    macros: Optional[MealMacros] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('macros'), 'exclude': lambda f: f is None }})
    r"""Macronutrient information for associated food"""  
    micros: Optional[MealMicros] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('micros'), 'exclude': lambda f: f is None }})
    r"""Micronutrient information for associated food"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of food logged by the user"""  
    quantity: Optional[MealQuantity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity of the food that was consumed, containing information on amount & units in which this was recorded"""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp the food is associated with, in ISO8601 format, with microsecond precision"""  
    type: Optional[MealTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Enum representing the category the consumed food/meal falls under (i.e. Breakfast/Lunch/Dinner etc"""  
    