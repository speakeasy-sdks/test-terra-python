"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutritionRequestBody:
    
    log_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('log_ids'), 'exclude': lambda f: f is None }})
    r"""List of identifiers for nutrition entries to be deleted"""  
    

@dataclasses.dataclass
class DeleteNutritionRequest:
    
    request_body: DeleteNutritionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    user_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'user_id', 'style': 'form', 'explode': True }})
    r"""user ID to query data for"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition404ApplicationJSON:
    r"""Returned when a parameter does not exist on Terra's end (e.g. user_id)"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition403ApplicationJSON:
    r"""Returned when credentials (dev ID and API key) are invalid"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition401ApplicationJSON:
    r"""Returned when authorization with a data provider has failed"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition400ApplicationJSON:
    r"""Returned when one or more parameters is malformed - an appropriate error message will be returned"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition207ApplicationJSONProcessedData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the nutrition log whose deletion was attempted"""  
    response_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_code'), 'exclude': lambda f: f is None }})
    r"""Response code from the provider when attempting to delete the nutrition log"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition207ApplicationJSON:
    r"""Returned when multiple status codes were obtained from attempting to delete the requested records"""
    
    processed_data: Optional[list[DeleteNutrition207ApplicationJSONProcessedData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed_data'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition200ApplicationJSONProcessedData:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier of the nutrition log whose deletion was attempted"""  
    response_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_code'), 'exclude': lambda f: f is None }})
    r"""Response code from the provider when attempting to delete the nutrition log"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DeleteNutrition200ApplicationJSON:
    r"""Returned when all records were deleted successfully"""
    
    processed_data: Optional[list[DeleteNutrition200ApplicationJSONProcessedData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processed_data'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class DeleteNutritionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    delete_nutrition_200_application_json_object: Optional[DeleteNutrition200ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when all records were deleted successfully"""  
    delete_nutrition_207_application_json_object: Optional[DeleteNutrition207ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when multiple status codes were obtained from attempting to delete the requested records"""  
    delete_nutrition_400_application_json_object: Optional[DeleteNutrition400ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when one or more parameters is malformed - an appropriate error message will be returned"""  
    delete_nutrition_401_application_json_object: Optional[DeleteNutrition401ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when authorization with a data provider has failed"""  
    delete_nutrition_403_application_json_object: Optional[DeleteNutrition403ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when credentials (dev ID and API key) are invalid"""  
    delete_nutrition_404_application_json_object: Optional[DeleteNutrition404ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when a parameter does not exist on Terra's end (e.g. user_id)"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    