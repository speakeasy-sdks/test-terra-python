"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import activity as shared_activity
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostActivityRequestBody:
    
    data: list[shared_activity.Activity] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    r"""List of user-tracked workouts to post to data provider"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostActivity404ApplicationJSON:
    r"""Returned when a parameter does not exist on Terra's end (e.g. user_id)"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostActivity403ApplicationJSON:
    r"""Returned when credentials (dev ID and API key) are invalid"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostActivity400ApplicationJSON:
    r"""Returned when one or more parameters is malformed - an appropriate error message will be returned"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""a detailed message describing the error"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""indicates that an error happened (value is error)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostActivity201ApplicationJSON:
    r"""Returned when activity was successfully created on the provider"""
    
    log_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('log_ids'), 'exclude': lambda f: f is None }})
    r"""List of identifiers for the objects created, returned in the same order they were posted. I.e. Posting [ObjectA, ObjectB] will return [IdentifierA, IdentifierB]"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    user: Optional[shared_user.User] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostActivityResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_activity_201_application_json_object: Optional[PostActivity201ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when activity was successfully created on the provider"""  
    post_activity_400_application_json_object: Optional[PostActivity400ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when one or more parameters is malformed - an appropriate error message will be returned"""  
    post_activity_403_application_json_object: Optional[PostActivity403ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when credentials (dev ID and API key) are invalid"""  
    post_activity_404_application_json_object: Optional[PostActivity404ApplicationJSON] = dataclasses.field(default=None)
    r"""Returned when a parameter does not exist on Terra's end (e.g. user_id)"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    